name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: xosmox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: xosmox-backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd xosmox-backend
        npm ci
    
    - name: Setup test database
      run: |
        cd xosmox-backend
        PGPASSWORD=postgres psql -h localhost -U postgres -d xosmox_test -f setup-db.sql
      env:
        PGPASSWORD: postgres
    
    - name: Run backend tests
      run: |
        cd xosmox-backend
        npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: xosmox_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret_key_for_ci

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd xosmox-backend && npm ci
        cd ../frontend && npm ci
    
    - name: Lint backend
      run: |
        cd xosmox-backend
        npm run lint || echo "Linting not configured"
    
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint || echo "Linting not configured"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run security audit - Backend
      run: |
        cd xosmox-backend
        npm audit --audit-level moderate
    
    - name: Run security audit - Frontend
      run: |
        cd frontend
        npm audit --audit-level moderate

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd xosmox-backend
        docker build -t xosmox/backend:${{ github.sha }} .
    
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t xosmox/frontend:${{ github.sha }} .
    
    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose config

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/ --namespace=staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/ --namespace=production